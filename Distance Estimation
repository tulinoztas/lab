#!/usr/bin/env python
# BEGIN ALL
import rospy
import cv2, cv_bridge
import numpy as np
from ros_numpy.point_cloud2 import pointcloud2_to_xyz_array
from sensor_msgs.msg import Image, PointCloud2
import message_filters 
from sensor_msgs import point_cloud2
from yolact_msgs.msg import Detections
from followbot.msg import MGSMeasurement, MGSMeasurements, MGSMarker
class Image:
  def __init__(self):
    # image coordinate:
    self.u = 0
    self.v = 0
    # target position:
    self.x = 0
    self.y = 0
    self.z = 0

    self.bridge = cv_bridge.CvBridge()
    self.img_sub = message_filters.Subscriber('/yolact_cpu_ros/detections', Detections)
    self.pcl_sub = message_filters.Subscriber('camera/depth/points', PointCloud2)      
    self.measurements = message_filters.ApproximateTimeSynchronizer([self.img_sub, self.pcl_sub], queue_size=5, slop=0.1)
    self.measurements.registerCallback(self.measurement_callback)
    self.measurements_pub = rospy.Publisher('mgs', MGSMeasurements, queue_size=10)
    self.detection_img_pub = rospy.Publisher('detection_image', Image, queue_size=10)

  def measurement_callback(self, img_msg, pcl_msg):
    # Initalize measurements:
    detections_msg = Measurements()
    detections_msg.header.stamp = rospy.Time.now()
    detections_msg.header.frame_id = 'base_footprint'
    detections_msg.measurements = []

    # read point cloud data
    cloud_pts = pointcloud2_to_xyz_array(pcl_msg)
    m_track.position = -np.asscalar(cloud_pts[i,j]

    # publish the sphd measurements:
    self.measurements_pub.publish(detections_msg)

if __name__ == '__main__':
  rospy.init_node('follower_detector')
  detector = Detector()
  rospy.spin()
# END ALL
